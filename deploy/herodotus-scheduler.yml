# template taken from https://raw.githubusercontent.com/kubernetes/website/main/content/en/examples/admin/sched/my-scheduler.yaml

apiVersion: v1
kind: ServiceAccount
metadata:
  name: herodotus-scheduler
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: herodotus-scheduler-as-kube-scheduler
subjects:
- kind: ServiceAccount
  name: herodotus-scheduler
  namespace: kube-system
roleRef:
  kind: ClusterRole
  name: system:kube-scheduler
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: herodotus-scheduler-as-volume-scheduler
subjects:
- kind: ServiceAccount
  name: herodotus-scheduler
  namespace: kube-system
roleRef:
  kind: ClusterRole
  name: system:volume-scheduler
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: herodotus-scheduler-extension-apiserver-authentication-reader
  namespace: kube-system
roleRef:
  kind: Role
  name: extension-apiserver-authentication-reader
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: herodotus-scheduler
  namespace: kube-system
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: herodotus-scheduler-config
  namespace: kube-system
data:
  herodotus-scheduler-config.yaml: |
    apiVersion: kubescheduler.config.k8s.io/v1beta2
    kind: KubeSchedulerConfiguration
    profiles:
      - schedulerName: herodotus-scheduler
    leaderElection:
      leaderElect: false    
---
# expose the scheduler on a service so we can run HTTP requests against the /metrics endpoint where our data lives
apiVersion: v1
kind: Service
metadata:
  name: herodotus-scheduler
  namespace: kube-system
  labels:
    component: scheduler
spec:
  ports:
  - port: 10259
    protocol: TCP
  selector:
    component: scheduler
    app: scheduler-binary
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    component: scheduler
    tier: control-plane
  name: herodotus-scheduler
  namespace: kube-system
spec:
  selector:
    matchLabels:
      component: scheduler
      tier: control-plane
  replicas: 1
  template:
    metadata:
      labels:
        component: scheduler
        app: scheduler-binary
        tier: control-plane
        version: second
    spec:
      serviceAccountName: herodotus-scheduler
      containers:
      - command:
        - /usr/local/bin/kube-scheduler
        - --config=/etc/kubernetes/herodotus-scheduler/herodotus-scheduler-config.yaml
        - --v=3
        - --show-hidden-metrics-for-version=1.25
        image: ghcr.io/dsmaugy/kubernetes-herodotus/herodotus-scheduler:latest
        livenessProbe:
          httpGet:
            path: /healthz
            port: 10259
            scheme: HTTPS
          initialDelaySeconds: 15
        name: kube-second-scheduler
        readinessProbe:
          httpGet:
            path: /healthz
            port: 10259
            scheme: HTTPS
        resources:
          requests:
            cpu: '0.1'
        securityContext:
          privileged: false
        volumeMounts:
          - name: config-volume
            mountPath: /etc/kubernetes/herodotus-scheduler
      hostNetwork: false
      hostPID: false
      volumes:
        - name: config-volume
          configMap:
            name: herodotus-scheduler-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: herodotus-endpoint
  namespace: kube-system
  labels:
    component: scheduler
    app: scheduler-endpoint
    tier: control-plane
spec:
  replicas: 1
  selector:
    matchLabels:
      component: scheduler
      app: scheduler-endpoint
  template:
    metadata:
      labels:
        component: scheduler
        app: scheduler-endpoint
    spec:
      containers:
        - name: scheduler-endpoint-server
          image: ghcr.io/dsmaugy/kubernetes-herodotus/herodotus-endpoint:latest
---
# expose the endpoint as service so we can interface with it through local HTTP requests
apiVersion: v1
kind: Service
metadata:
  name: herodotus-endpoint
  namespace: kube-system
  labels:
    component: scheduler
spec:
  type: NodePort
  ports:
  - port: 8000
    protocol: TCP
  selector:
    component: scheduler
    app: scheduler-endpoint